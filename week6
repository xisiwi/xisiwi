import gab.opencv.*;
import org.opencv.core.Rect;

PImage photo;
PImage faceFeatures;
int num = 800;
int t = 0;
Curve[] curves;
boolean savePDF;

void setup() {
  size(800, 800);
  colorMode(RGB, 255);
  background(255);
  curves = new Curve[num];

  // 加载照片并将其缩放到和画布一样大的尺寸
  photo = loadImage("img.jpg");
  photo.resize(width, height);

  faceFeatures = createImage(width, height, RGB);
  faceFeatures.loadPixels();
  for (int i = 0; i < faceFeatures.pixels.length; i++) {
    faceFeatures.pixels[i] = color(255); // 初始化faceFeatures图像为白色
  }
  faceFeatures.updatePixels();

  for (int i = 0; i < curves.length; i++) {
    PVector fP = new PVector(i, 0);
    curves[i] = new Curve(fP);
    float ph = noise(i * 0.01) * TWO_PI;
    curves[i].phase = ph;
  }
}

void draw() {
  background(0, 0, 100);

  for (int i = 1; i < curves.length; i++) {
    float xPre = curves[i].cvt.get(curves[i].cvt.size() - 1).x;
    float xNow = xPre + noise(i * .05, t * .01) - 0.48;
    PVector cv = new PVector(xNow, t);

    int row = int(map(t, 0, height, 0, photo.height));
    int col = int(map(xNow, 0, width, 0, photo.width));
    color pixColor = photo.get(col, row);
    curves[i].drawState = brightness(pixColor) / 255.0;

    curves[i].cvt.add(cv);
  }

  for (Curve c : curves) {
    c.drawCurve(faceFeatures);
  }

  image(faceFeatures, 0, 0);

  if (savePDF) {
    beginRecord(PDF, "curves.pdf");
    savePDF = false;
  }

  t++;
}

void keyPressed() {
  if (key == 'p') savePDF = true;
}

class Curve {
  PVector fP;
  ArrayList<PVector> cvt;
  float phase;
  float drawState;

  Curve(PVector fP) {
    this.fP = fP;
    cvt = new ArrayList<PVector>();
    cvt.add(fP);
  }

  void drawCurve(PImage faceFeatures) {
    stroke(255, 255, 255, drawState * 255);
    strokeWeight(drawState * 3);
    noFill();
    beginShape();
    curveVertex(fP.x, fP.y);
    for (PVector v : cvt) {
      curveVertex(v.x, v.y);
    }
    curveVertex(cvt.get(cvt.size() - 1).x, cvt.get(cvt.size() - 1).y);
    endShape();

    for (PVector v : cvt) {
      int x = int(v.x);
      int y = int(v.y);
      if (x >= 0 && x < width && y >= 0 && y < height) {
        int pixelIdx = y * width + x;
        faceFeatures.pixels[pixelIdx] = photo.pixels[pixelIdx]; // 使用图片的原始像素颜色
      }
    }
    faceFeatures.updatePixels();
  }
}
